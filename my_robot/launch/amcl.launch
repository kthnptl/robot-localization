<?xml version="1.0" ?>
<launch>
  <!-- Map server -->
  <arg name="map_file" default="$(find my_robot)/maps/myspace_map.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
  
  <!-- AMCL Server -->
  <node name="amcl" pkg="amcl" type="amcl" output="screen">
    <!--remap from="/scan" to="/ball_chaser/laser/scan"/-->
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="robot_footprint"/>
    <param name="global_frame_id" value="map"/>
    
    <!-- ***START*** tuning of AMCL Parameters :- http://wiki.ros.org/amcl#Parameters -->
    
    <!-- 1. OVERALL FILTER Params 
         ________________________ -->
    <!-- default= 0.0m; Initial pose mean (x), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_x" value="0"/>
    <!-- default= 0.0m; Initial pose mean (y), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_y" value="0"/>
    <!-- default= 0.0radians; Initial pose mean (yaw), used to initialize filter with Gaussian distribution.-->
    <param name="initial_pose_a" value="1.57"/>
    <!--  As amcl dynamically adjusts its particles for every iteration, it expects a range of the number of particles as an input. A larger range, with a high maximum might be too computationally extensive for a low-end system-->
    <!-- default=100; Minimum allowed no. of particles -->
    <param name="min_particles" value="100"/>
    <!-- default=5000; Maximum allowed no. of particles -->
    <param name="max_particles" value="5000"/>
    <!-- Upon receiving a scan, AMCL checks the values for 'update_min_d' and 'update_min_a' and compares to how far the robot has moved. Based on this comparison it decides whether or not to perform a filter update or to discard the scan data. Discarding data could result in poorer localization results, and too many frequent filter updates for a fast moving robot could also cause computational problems. -->
    <!--default= 0.2m; Translational movement required before performing a filter update-->
    <param name="update_min_d" value="0.03"/>
    <!--default= PI/6.0 radians; Rotational movement required before performing a filter update-->
    <param name="update_min_a" value="0.105"/>

    <!-- 2. Lidar/LASER Params
         _______________________
                                "LIKELIHOOD_FIELD" model uses only 2: z_hit and z_rand. 
                                "BEAM" model uses all 4: z_hit, z_short, z_max, and z_rand.
                                Note that whichever mixture weights are in use should sum to 1  -->
    <param name="laser_model_type" value="likelihood_field"/>
    <!-- default= -1.0; Minimum scan range; if set to -1.0 will use the laser's reported Minimum range-->
    <param name="laser_min_range" value="-1.0"/>
    <!-- default= -1.0; Maximum scan range; if set to -1.0 will use the laser's reported Maximum range-->
    <param name="laser_max_range" value="-1.0"/>
    <!--default= 30; How many evenly-spaced beams in each scan to be used when updating the filter-->
    <param name="laser_max_beams" value="30"/>
    <!-- default= 0.95; Mixture weight for the z_hit part of the model -->
    <param name="laser_z_hit" value="0.95"/>
    <!-- default= 0.05; Mixture weight for the z_rand part of the model -->
    <param name="laser_z_rand" value="0.05"/>
    <!-- default= 2.0m; Maximum distance to do obstacle inflation on map, for use in likelihood_field model -->
    <param name="laser_likelihood_max_dist" value="2.0"/>

    <!-- 3. ODOMETRY Params
         __________________
                            odom_model_type :- "diff" or "diff-corrected" then we use the sample_motion_model_odometry algorithm from Probabilistic Robotics, p136; this model uses the noise parameters odom_alpha1 through odom_alpha4, as defined in the book.
                            odom_model_type :- "omni" or "omni-corrected" then we use a custom model for an omni-directional base, which uses odom_alpha1 through odom_alpha5. The meaning of the first four parameters is similar to that for the "diff" model. The fifth parameter (Translation-related noise parameter) capture the tendency of the robot to translate (without rotating) perpendicular to the observed direction of travel. -->
    <param name="odom_model_type" value="diff-corrected"/>
    <!--default=0.2; expected noise in odometry's rotation estimate from rotat. component of robot's motion.-->
    <param name="odom_alpha1" value="0.0001"/>
    <!--default=0.2; expected noise in odometry's rotation estimate from transl. component of robot's motion-->
    <param name="odom_alpha2" value="0.001"/>
    <!--default=0.2; expected noise in odometry's transl. estimate from transl. component of robot's motion.-->
	  <param name="odom_alpha3" value="0.0001"/>
    <!--default=0.2; expected noise in odometry's transl. estimate from rotat. component of robot's motion.-->
	  <param name="odom_alpha4" value="0.002"/>
	  <!--default=0.2; Translation-related noise parameter (only used if model is "omni").-->
    <!--param name="odom_alpha5" value="0.1"/-->

    <!-- ***END*** -->
  </node>
  
  
  <!-- Move Base -->
  <node name="move_base" pkg="move_base" type="move_base" respawn="false" output="screen">
    <!--remap from="/scan" to="/ball_chaser/laser/scan"/-->
    <param name="base_global_planner" value="navfn/NavfnROS" />
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <rosparam file="$(find my_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find my_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find my_robot)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find my_robot)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find my_robot)/config/base_local_planner_params.yaml" command="load" />
  </node>
</launch>
